#!/bin/bash

function process_configuration_urls() {
    urls=(
        "https://raw.githubusercontent.com/yebekhe/TelegramV2rayCollector/main/sub/base64/mix"
        # "https://raw.githubusercontent.com/mahdibland/ShadowsocksAggregator/master/Eternity"
        # "https://raw.githubusercontent.com/mahdibland/SSAggregator/master/sub/sub_merge_base64.txt"
        # "https://raw.githubusercontent.com/mfuu/v2ray/master/v2ray"
    )

    for url in "${urls[@]}"; do
        fetch_configs "$url"
    done
}

function fetch_configs() {
    local url="$1"
    local base64_decode_url=$(curl -s "$url" | base64 -d)
    local num_total=$(wc -l <<<"$base64_decode_url")
    local num_count=0
    local num_ss=0
    local num_ssr=0
    local num_trojan=0
    local num_vless=0
    local num_vmess=0
    while IFS= read -r proxy_link_raw; do
        ((num_count++))
        case "$proxy_link_raw" in
        vless://*)
            generate_vless_config "$proxy_link_raw"
            ((num_vless++))
            ;;
        trojan://*)
            generate_trojan_config "$proxy_link_raw"
            ((num_trojan++))
            ;;
        vmess://*)
            generate_vmess_config "$proxy_link_raw"
            ((num_vmess++))
            ;;
        ss://*)
            # generate_ss_config "$proxy_link_raw"
            ((num_ss++))
            ;;
        ssr://*)
            # echo "SSR NOT SUPPORTED"
            ((num_ssr++))
            ;;
        *)
            # echo "NOT SUPPORTED: $proxy_link_raw"
            ;;
        esac
        progress_bar "$num_count" "$num_total"
    done <<<"$base64_decode_url"
    echo -ne "\n"
    echo -e "URL: $url\nTOTAL: $num_total - VLESS: $num_vless - VMESS: $num_vmess - TROJAN: $num_trojan - SS: $num_ss - SSR: $num_ssr\n------------------------------"
}

function generate_vless_config() {
    local url="$1"
    proxy_link=$(convert_percent_encoding "$url")
    protocol=$(parse_protocol "$proxy_link")
    id=$(parse_credentials "$proxy_link" "$protocol")
    address=$(parse_address "$proxy_link")
    port=$(parse_port "$proxy_link")
    query_string=$(parse_query_string "$proxy_link")
    network=$(parse_network "$query_string" "tcp")
    security=$(parse_security "$query_string" "none")
    file_path=$(make_config_file "$protocol" "$network" "$security" "$address" "$port")
    sed_cmd_protocol=$(sed_cmd_protocol_vless "$address" "$port" "$id" "$query_string")
    sed_cmd_network=$(sed_cmd_network "$network" "$query_string")
    sed_cmd_security=$(sed_cmd_security "$security" "$query_string")
    sed -i "$sed_cmd_protocol" "$file_path"
    sed -i "$sed_cmd_network" "$file_path"
    sed -i "$sed_cmd_security" "$file_path"
}

function generate_trojan_config() {
    local url="$1"
    proxy_link=$(convert_percent_encoding "$url")
    protocol=$(parse_protocol "$proxy_link")
    password=$(parse_credentials "$proxy_link" "$protocol")
    address=$(parse_address "$proxy_link")
    port=$(parse_port "$proxy_link")
    query_string=$(parse_query_string "$proxy_link")
    network=$(parse_network "$query_string" "tcp")
    security=$(parse_security "$query_string" "tls")
    file_path=$(make_config_file "$protocol" "$network" "$security" "$address" "$port")
    sed_cmd_protocol=$(sed_cmd_protocol_trojan "$address" "$port" "$password" "$query_string")
    sed_cmd_network=$(sed_cmd_network "$network" "$query_string")
    sed_cmd_security=$(sed_cmd_security "$security" "$query_string")
    sed -i "$sed_cmd_protocol" "$file_path"
    sed -i "$sed_cmd_network" "$file_path"
    sed -i "$sed_cmd_security" "$file_path"
}

function generate_vmess_config() {
    local url="$1"
    protocol=$(parse_protocol "$url")
    credentials=$(parse_credentials "$url" "$protocol")
    query_string=$(jq -r 'del(.ps, .v) | to_entries | map(select(.value != "") | "\(.key | gsub("type"; "headerType") | gsub("net"; "type") | gsub("scy"; "method") | gsub("security"; "method") | gsub("tls"; "security"))=\(.value|tostring)") | join(";")' <<<"$credentials")
    address=$(get_value "add" "$query_string")
    port=$(get_value "port" "$query_string")
    network=$(parse_network "$query_string")
    security=$(parse_security "$query_string" "none")
    file_path=$(make_config_file "$protocol" "$network" "$security" "$address" "$port")
    sed_cmd_protocol=$(sed_cmd_protocol_vmess "$address" "$query_string")
    sed_cmd_network=$(sed_cmd_network "$network" "$query_string")
    sed_cmd_security=$(sed_cmd_security "$security" "$query_string")
    sed -i "$sed_cmd_protocol" "$file_path"
    sed -i "$sed_cmd_network" "$file_path"
    sed -i "$sed_cmd_security" "$file_path"
}

function generate_ss_config() {
    local url="$1"
    proxy_link=$(convert_percent_encoding "$url")
    protocol=$(parse_protocol "$proxy_link")
    credentials=$(parse_credentials "$proxy_link" "$protocol")
    method=$(awk -F ':' '{print $1}' <<<"$credentials")
    password=$(awk -F ':' '{print $2}' <<<"$credentials")
    address=$(parse_address "$proxy_link")
    port=$(parse_port "$proxy_link")
    query_string=$(parse_query_string "$proxy_link")
    network=$(parse_network "$query_string" "tcp")
    security=$(parse_security "$query_string" "none")
    file_path=$(make_config_file "$protocol" "$network" "$security" "$address" "$port")
    sed_cmd_protocol=$(sed_cmd_protocol_ss "$address" "$port" "$password" "$method")
    sed_cmd_network=$(sed_cmd_network "$network" "$query_string")
    sed_cmd_security=$(sed_cmd_security "$security" "$query_string")
    sed -i "$sed_cmd_protocol" "$file_path"
    sed -i "$sed_cmd_network" "$file_path"
    sed -i "$sed_cmd_security" "$file_path"
}

function parse_protocol() {
    local input="$1"
    awk -F '://' '{print $1}' <<<"$input"
}

function parse_credentials() {
    local input="$1"
    local protocol="$2"
    case "$protocol" in
    vless | trojan)
        awk -F '://' '{print $2}' <<<"$input" | awk -F '@' '{print $1}'
        ;;
    ss)
        awk -F '://' '{print $2}' <<<"$input" | awk -F '@' '{print $1}' | base64 -d
        ;;
    vmess)
        awk -F '://' '{print $2}' <<<"$input" | base64 -d
        ;;
    esac
}

function parse_address() {
    local input="$1"
    local address=$(cut -d'@' -f2 <<<"$input" | cut -d'?' -f1 | cut -d'#' -f1 | rev | cut -d':' -f2- | rev | tr '[:upper:]' '[:lower:]')
    if [[ ${address:0:1} == "[" && ${address: -1} == "]" ]]; then
        address=${address:1:-1}
    fi
    echo "$address"
}

function parse_port() {
    local input="$1"
    awk -F '@' '{print $2}' <<<"$input" | awk -F '[?#]' '{print $1}' | awk -F ':' '{print $NF}'
}

function parse_query_string() {
    local input="$1"
    local query_string=""
    local key
    local value
    local input=$(awk -F '?' '{print $2}' <<<"$input" | awk -F '#' '{print $1}')
    IFS='&' read -ra params <<<"$input"
    for param in "${params[@]}"; do
        IFS='=' read -r -a pair <<<"$param"
        key=${pair[0]}
        value=${pair[1]}
        query_string="$query_string$key=$value;"
    done
    query_string=${query_string%?}
    echo $query_string
}

function parse_network() {
    local query_string="$1"
    local default_value="$2"
    local type=$(get_value "type" "$query_string" "$default_value")
    local headerType=$(get_value "headerType" "$query_string")
    if [[ "$headerType" == "http" ]]; then
        network="${type}-${headerType}"
    else
        network="$type"
    fi
    echo "$network"
}

function parse_security() {
    local query_string="$1"
    local default_value="$2"
    local security=$(get_value "security" "$query_string" "$default_value")
    echo "$security"
}

function make_config_file() {
    local protocol="$1"
    local network="$2"
    local security="$3"
    local address="$4"
    local port="$5"
    data_base=$(<"$template_dir/0-base.md")
    data_protocol=$(<"$template_dir/1-protocol-$protocol.md")
    data_network=$(<"$template_dir/2-network-$network.md")
    data_security=$(<"$template_dir/3-security-$security.md")
    data_base="${data_base//\[PROTOCOL\]/$data_protocol}"
    data_base="${data_base//\[NETWORK\]/$data_network}"
    data_base="${data_base//\[SECURITY\]/$data_security}"
    local pr=$(short_name "$protocol")
    local ne=$(short_name "$network")
    local se=$(short_name "$security")
    local time=$(date_time)
    local file_path="$raw_dir/[$pr-$se-$ne] [$time].json"
    echo "$data_base" >"$file_path"
    echo "$file_path"
}

function sed_cmd_protocol_vless() {
    local address="$1"
    local port="$2"
    local id="$3"
    local query_string="$4"
    local encryption=$(get_value "encryption" "$query_string" "none")
    local flow=$(get_value "flow" "$query_string")
    local sed_cmd="
        s#\[\s*ADDRESS\s*\]#$address#g;
        s#\[\s*PORT\s*\]#$port#g;
        s#\[\s*ENCRYPTION\s*\]#$encryption#g;
        s#\[\s*FLOW\s*\]#$flow#g;
        s#\[\s*ID\s*\]#$id#g
    "
    echo "$sed_cmd"
}

function sed_cmd_protocol_trojan() {
    local address="$1"
    local port="$2"
    local password="$3"
    local query_string="$4"
    local flow=$(get_value "flow" "$query_string")
    local sed_cmd="
        s#\[\s*ADDRESS\s*\]#$address#g;
        s#\[\s*FLOW\s*\]#$flow#g;
        s|\[\s*PASSWORD\s*\]|$password|g;
        s#\[\s*PORT\s*\]#$port#g    
    "
    echo "$sed_cmd"
}

function sed_cmd_protocol_vmess() {
    local address="$1"
    local query_string="$2"
    local port=$(get_value "port" "$query_string")
    local aid=$(get_value "aid" "$query_string" "0")
    local id=$(get_value "id" "$query_string")
    local method=$(get_value "method" "$query_string" "auto")
    local sed_cmd="
        s#\[\s*ADDRESS\s*\]#$address#g;
        s#\[\s*PORT\s*\]#$port#g;
        s#\[\s*ALTERID\s*\]#$aid#g;
        s#\[\s*ID\s*\]#$id#g;
        s#\[\s*METHOD\s*\]#$method#g  
    "
    echo "$sed_cmd"
}

function sed_cmd_protocol_ss() {
    local address="$1"
    local port="$2"
    local password="$3"
    local method="$4"
    local sed_cmd="
        s#\[\s*ADDRESS\s*\]#$address#g;
        s#\[\s*METHOD\s*\]#$method#g;
        s|\[\s*PASSWORD\s*\]|$password|g;
        s#\[\s*PORT\s*\]#$port#g    
    "
    echo "$sed_cmd"
}

function sed_cmd_network() {
    local network="$1"
    local query_string="$2"
    local sed_cmd
    case "$network" in
    http | tcp-http | ws)
        local host=$(get_value "host" "$query_string")
        local path=$(get_value "path" "$query_string" "/")
        sed_cmd="
            s#\[\s*HOST\s*\]#$host#g;
            s#\[\s*PATH\s*\]#$path#g
        "
        ;;
    grpc)
        local serviceName=$(get_value "serviceName" "$query_string")
        sed_cmd="s#\[\s*SERVICENAME\s*\]#$serviceName#g"
        ;;
    tcp)
        #
        ;;
    esac
    echo "$sed_cmd"
}

function sed_cmd_security() {
    local security="$1"
    local query_string="$2"
    local sed_cmd
    case "$security" in
    tls)
        local alpn=$(get_value "alpn" "$query_string")
        local fp=$(get_value "fp" "$query_string")
        local sni=$(get_value "sni" "$query_string")
        sed_cmd="
            s#\[\s*ALPN\s*\]#$alpn#g;
            s#\[\s*FP\s*\]#$fp#g;
            s#\[\s*SNI\s*\]#$sni#g
        "
        ;;
    reality)
        local fp=$(get_value "fp" "$query_string")
        local pbk=$(get_value "pbk" "$query_string")
        local sni=$(get_value "sni" "$query_string")
        local sid=$(get_value "sid" "$query_string")
        local spx=$(get_value "spx" "$query_string")
        sed_cmd="
            s#\[\s*FP\s*\]#$fp#g;
            s#\[\s*PBK\s*\]#$pbk#g;
            s#\[\s*SNI\s*\]#$sni#g;
            s#\[\s*SID\s*\]#$sid#g;
            s#\[\s*SPX\s*\]#$spx#g
        "
        ;;
    none)
        #
        ;;
    esac
    echo "$sed_cmd"
}
